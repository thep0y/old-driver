{
    "parser": "vue-eslint-parser",
    "parserOptions": {
        "parser": "@typescript-eslint/parser",
        "extraFileExtensions": [
            "vue"
        ]
    },
    "extends": [
        "plugin:vue/vue3-recommended",
        "eslint:recommended"
    ],
    "plugins": [
        "eslint-plugin",
        "@typescript-eslint"
    ],
    "rules": {
        "indent": [
            "error",
            2
        ],
        "semi": [
            "error",
            "never"
        ],
        "quotes": [
            "error",
            "single"
        ],
        "comma-dangle": [
            "error",
            "never"
        ],
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 1,
                "maxEOF": 0,
                "maxBOF": 0
            }
        ],
        "padding-line-between-statements": [
            "error",
            {
                "blankLine": "always",
                "prev": "*",
                "next": "return"
            }, // return 前必须空一行
            {
                "blankLine": "always",
                "prev": [
                    "const",
                    "let",
                    "var"
                ],
                "next": "*"
            }, // 变量声名之后必须空一行
            {
                "blankLine": "any",
                "prev": [
                    "const",
                    "let",
                    "var"
                ],
                "next": [
                    "const",
                    "let",
                    "var"
                ]
            } // 变量声名之后必须空一行
        ],
        "padded-blocks": [
            "error",
            {
                "blocks": "never"
            }
        ],
        "newline-per-chained-call": [
            "error",
            {
                "ignoreChainWithDepth": 2
            }
        ],
        "array-element-newline": [
            "error",
            {
                "ArrayExpression": "consistent",
                "ArrayPattern": {
                    "multiline": true,
                    "minItems": 3
                }
            }
        ],
        "array-bracket-newline": [
            "error",
            {
                "multiline": true,
                "minItems": 3
            }
        ],
        "no-multi-spaces": "error",
        "no-trailing-spaces": "error",
        // "no-unused-vars": "error",
        "no-unused-vars": "off",
        "object-curly-spacing": [
            "error",
            "always"
        ],
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        // ts
        // "@typescript-eslint/no-unused-vars": ["error"],
        // "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/space-infix-ops": [
            "error",
            {
                "int32Hint": false
            }
        ],
        "@typescript-eslint/member-delimiter-style": [
            "error",
            {
                "multiline": {
                    "delimiter": "semi",
                    "requireLast": true
                },
                "singleline": {
                    "delimiter": "semi",
                    "requireLast": false
                },
                "multilineDetection": "brackets"
            }
        ],
        "@typescript-eslint/space-before-blocks": "error",
        "@typescript-eslint/type-annotation-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ],
        // vue
        // "vue/singleline-html-element-content-newline": "off",
        // "vue/max-attributes-per-line": "off",
        // "vue/no-mutating-props": "off",
        // "vue/require-prop-types": "off",
        // "vue/multiline-html-element-content-newline": "off",
        // "vue/html-self-closing": "off",
        // "vue/html-indent": "off"
        "vue/v-on-event-hyphenation": [
            "error",
            "always",
            {
                "autofix": true,
                "ignore": []
            }
        ]
    }
}